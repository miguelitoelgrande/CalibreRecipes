#!/usr/bin/env  python2

__license__   = 'GPL v3'
__copyright__ = '2015, MM'

'''
https://de.wikipedia.org/wiki/keyword
https://de.wikipedia.org/w/index.php?title=keyword&printable=yes
'''


from calibre.web.feeds.news import BasicNewsRecipe
#from calibre.ebooks.BeautifulSoup import Tag


class WikipediaBook(BasicNewsRecipe):
    title                 = 'de.wikipedia.org'
    __author__            = 'MM'
    description           = 'Create an eBook from Wikipedia articles'
    publisher             = 'Wikipedia'
    category              = 'knowledge'
    no_stylesheets        = False
#    encoding              = 'utf-8'
    use_embedded_content  = False
    language               = 'de'
    
    
    #MM: added those two as a quick win improvement.
    ignore_duplicate_articles = {'title', 'url'}
    simultaneous_downloads = 6
    
    INDEX                 = u'https://de.wikipedia.org/wiki/'
    
    # Well, somehow the CSS of Wikipedia did not get loaded. So copying it here as "extra_css"
    extra_css = '''
 	a { text-decoration: none; color: rgb(6, 69, 173); background: transparent none repeat scroll 0% 0%; }
	a:visited { color: rgb(11, 0, 128); }
	a:active { color: rgb(250, 167, 0); }
	a:hover, a:focus { text-decoration: underline; }
	a.new, #p-personal a.new { color: rgb(186, 0, 0); }
	a.new:visited, #p-personal a.new:visited { color: rgb(165, 88, 88); }
	.mw-body a.extiw, .mw-body a.extiw:active { color: rgb(51, 102, 187); }
	.mw-body a.extiw:visited { color: rgb(102, 51, 102); }
	.mw-body a.extiw:active { color: rgb(187, 102, 51); }
	.mw-body a.external { color: rgb(51, 102, 187); }
	.mw-body a.external:visited { color: rgb(102, 51, 102); }
	.mw-body a.external:active { color: rgb(187, 102, 51); }
	img { border: medium none; vertical-align: middle; }
	h1, h2, h3, h4, h5, h6 { color: black; background: transparent none repeat scroll 0% 0%; font-weight: normal; margin: 0px; overflow: hidden; padding-top: 0.5em; padding-bottom: 0.17em; border-bottom: 1px solid rgb(170, 170, 170); }
	h1 { font-size: 188%; }
	h2 { font-size: 150%; }
	h3, h4, h5, h6 { border-bottom: medium none; font-weight: bold; }
	h3 { font-size: 128%; }
	h4 { font-size: 116%; }
	h1, h2 { margin-bottom: 0.6em; }
	h3, h4, h5 { margin-bottom: 0.3em; }
	p { margin: 0.4em 0px 0.5em; }
	ul { list-style-type: square; margin: 0.3em 0px 0px 1.6em; padding: 0px; }
	ol { margin: 0.3em 0px 0px 3.2em; padding: 0px; list-style-image: none; }
	li { margin-bottom: 0.1em; }
	dt { font-weight: bold; margin-bottom: 0.1em; }
	dl { margin-top: 0.2em; margin-bottom: 0.5em; }
	table { font-size: 100%; }
	form { border: medium none; margin: 0px; }
	.center { width: 100%; text-align: center; }
	.center * { margin-left: auto; margin-right: auto; }
	#toc, .toc, .mw-warning, .toccolours { border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249); padding: 5px; font-size: 95%; }
	#toc, .toc { display: table; padding: 7px; }
	#toc h2, .toc h2 { display: inline; border: medium none; padding: 0px; font-size: 100%; font-weight: bold; }
	#toc #toctitle, .toc #toctitle, #toc .toctitle, .toc .toctitle { text-align: center; }
	#toc ul, .toc ul { list-style-type: none; list-style-image: none; margin-left: 0px; padding: 0px; text-align: left; }
	#toc ul ul, .toc ul ul { margin: 0px 0px 0px 2em; }
	#toc .toctoggle, .toc .toctoggle { font-size: 94%; }
	div.floatleft, table.floatleft { margin: 0px 0.5em 0.5em 0px; border: 0px none; }
	div.thumb { margin-bottom: 0.5em; width: auto; background-color: transparent; }
	div.thumbinner { border: 1px solid rgb(204, 204, 204); padding: 3px; background-color: rgb(249, 249, 249); font-size: 94%; text-align: center; overflow: hidden; }
	html .thumbimage { border: 1px solid rgb(204, 204, 204); }
	html .thumbcaption { border: medium none; line-height: 1.4em; padding: 3px; font-size: 94%; text-align: left; }
	div.magnify { float: right; margin-left: 3px; }
	div.magnify a { display: block; text-indent: 15px; white-space: nowrap; overflow: hidden; width: 15px; height: 11px; background-image: linear-gradient(transparent, transparent), url('undefined'); -moz-user-select: none; }
	img.thumbborder { border: 1px solid rgb(221, 221, 221); }
	.mw-content-ltr .thumbcaption { text-align: left; }
	.mw-content-ltr .magnify { float: right; margin-left: 3px; margin-right: 0px; }
	.mw-content-ltr div.magnify a { background-image: linear-gradient(transparent, transparent), url('undefined'); }
	div.tright { margin: 0.5em 0px 1.3em 1.4em; }
	div.tleft { margin: 0.5em 1.4em 1.3em 0px; }
	.catlinks { border: 1px solid rgb(170, 170, 170); background-color: rgb(249, 249, 249); padding: 5px; margin-top: 1em; clear: both; }
	#siteNotice { position: relative; text-align: center; margin: 0px; }
	.firstHeading { margin-bottom: 0.1em; line-height: 1.2em; padding-bottom: 0px; }
	#siteSub { display: none; }
	#jump-to-nav { margin-top: -1.4em; margin-bottom: 1.4em; }
	#contentSub, #contentSub2 { font-size: 84%; line-height: 1.2em; margin: 0px 0px 1.4em 1em; color: rgb(84, 84, 84); width: auto; }
'''



    conversion_options = {
                          'comment'          : description
                        , 'tags'             : category
                        , 'publisher'        : publisher
                        , 'language'         : language
                        , 'pretty_print'     : True
                        , 'linearize_tables' : False
                        , 'preserve_cover_aspect_ratio' : True
         #               , 'output-profile'  : 'kindle'
                        }

# linearize-tables
# 
# Some badly designed documents use tables to control the layout of text on the page.
# When converted these documents often have text that runs off the page and other artifacts.
# This option will extract the content from the tables and present it in a linear fashion.

# pretty-print
# 
# If specified, the output plugin will try to create output that is as human readable as possible.
# May not have any effect for some output plugins.

# output-profile   kindle, kindle_dx, kindle_fire, kindle_pw,


    # print version of wikipedia only hides page elements via css..
    keep_only_tags = [ dict(name='h1', attrs={'id':'firstHeading'})
                     , dict(name='div', attrs={'id':'bodyContent'})
    ]

    remove_tags = [ dict(name=['span'], attrs={'class':'mw-editsection'})
                  , dict(name=['div'], attrs={'id':'jump-to-nav'})
                  , dict(attrs={'class':'noprint'})
                  ]

    TOPICS = [
         (u'Energie'   , {u'Stromhandel', u'Kraftwerksmanagement' }  )
        ,(u'Finanzen'   , {u'Hedgegesch√§ft', u'Finanzrisiko' }  )            
        ,(u'Geo'     , {u'Fulda', u'Kassel', u'Frankfurt_(Main)_Hauptbahnhof' } )
        , (u'IT'     , {u'R_(Programmiersprache)' , u'Zeitreihenanalyse' }   )
            ]

    def get_cover_url(self):
        cover_url = 'https://de.wikipedia.org/static/images/project-logos/dewiki.png'
        return cover_url

    def preprocess_html(self, soup):
        # remove all <a href=""> tags as those are annoying in documents on touch screen page flipping...
        # idea: http://www.mobileread.com/forums/showthread.php?t=124215
        for alink in soup.findAll('a'):			
            if alink.has_key('href') :
                if alink['href'][:4] == "http" : # only replace external links for the moment.
                    del alink['href']
#            if alink.string is not None:
#                tstr = '<span style="text-decoration: underline;">' + alink.string + '</span>'
#                if alink['href'][:4] == "http" : # only replace external links for the moment.
#                    alink.replaceWith(tstr)
#            else :                
#                #tstr =  '<span style="text-decoration: underline;">' + alink.contents + '</span>'
#                del alink['href']
#                #alink.unwrap()
        return soup


    def parse_index(self):
        totalfeeds = []
        for topicobj in self.TOPICS:
            chaptitle, topics = topicobj
            articles = []
            for mykey in topics:
                url = self.INDEX + mykey
                title = mykey #self.tag_to_string(atag)
                articles.append({
                                  'title'      :title
                                 ,'url'        :url
                               })
            totalfeeds.append((chaptitle, articles))
        return totalfeeds

